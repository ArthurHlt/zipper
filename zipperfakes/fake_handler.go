// Code generated by counterfeiter. DO NOT EDIT.
package zipperfakes

import (
	"sync"

	"github.com/ArthurHlt/zipper"
)

type FakeHandler struct {
	ZipStub        func(src *zipper.Source) (zip *zipper.ZipFile, err error)
	zipMutex       sync.RWMutex
	zipArgsForCall []struct {
		src *zipper.Source
	}
	zipReturns struct {
		result1 *zipper.ZipFile
		result2 error
	}
	zipReturnsOnCall map[int]struct {
		result1 *zipper.ZipFile
		result2 error
	}
	Sha1Stub        func(src *zipper.Source) (sha1 string, err error)
	sha1Mutex       sync.RWMutex
	sha1ArgsForCall []struct {
		src *zipper.Source
	}
	sha1Returns struct {
		result1 string
		result2 error
	}
	sha1ReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	DetectStub        func(src *zipper.Source) bool
	detectMutex       sync.RWMutex
	detectArgsForCall []struct {
		src *zipper.Source
	}
	detectReturns struct {
		result1 bool
	}
	detectReturnsOnCall map[int]struct {
		result1 bool
	}
	NameStub        func() string
	nameMutex       sync.RWMutex
	nameArgsForCall []struct{}
	nameReturns     struct {
		result1 string
	}
	nameReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeHandler) Zip(src *zipper.Source) (zip *zipper.ZipFile, err error) {
	fake.zipMutex.Lock()
	ret, specificReturn := fake.zipReturnsOnCall[len(fake.zipArgsForCall)]
	fake.zipArgsForCall = append(fake.zipArgsForCall, struct {
		src *zipper.Source
	}{src})
	fake.recordInvocation("Zip", []interface{}{src})
	fake.zipMutex.Unlock()
	if fake.ZipStub != nil {
		return fake.ZipStub(src)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.zipReturns.result1, fake.zipReturns.result2
}

func (fake *FakeHandler) ZipCallCount() int {
	fake.zipMutex.RLock()
	defer fake.zipMutex.RUnlock()
	return len(fake.zipArgsForCall)
}

func (fake *FakeHandler) ZipArgsForCall(i int) *zipper.Source {
	fake.zipMutex.RLock()
	defer fake.zipMutex.RUnlock()
	return fake.zipArgsForCall[i].src
}

func (fake *FakeHandler) ZipReturns(result1 *zipper.ZipFile, result2 error) {
	fake.ZipStub = nil
	fake.zipReturns = struct {
		result1 *zipper.ZipFile
		result2 error
	}{result1, result2}
}

func (fake *FakeHandler) ZipReturnsOnCall(i int, result1 *zipper.ZipFile, result2 error) {
	fake.ZipStub = nil
	if fake.zipReturnsOnCall == nil {
		fake.zipReturnsOnCall = make(map[int]struct {
			result1 *zipper.ZipFile
			result2 error
		})
	}
	fake.zipReturnsOnCall[i] = struct {
		result1 *zipper.ZipFile
		result2 error
	}{result1, result2}
}

func (fake *FakeHandler) Sha1(src *zipper.Source) (sha1 string, err error) {
	fake.sha1Mutex.Lock()
	ret, specificReturn := fake.sha1ReturnsOnCall[len(fake.sha1ArgsForCall)]
	fake.sha1ArgsForCall = append(fake.sha1ArgsForCall, struct {
		src *zipper.Source
	}{src})
	fake.recordInvocation("Sha1", []interface{}{src})
	fake.sha1Mutex.Unlock()
	if fake.Sha1Stub != nil {
		return fake.Sha1Stub(src)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.sha1Returns.result1, fake.sha1Returns.result2
}

func (fake *FakeHandler) Sha1CallCount() int {
	fake.sha1Mutex.RLock()
	defer fake.sha1Mutex.RUnlock()
	return len(fake.sha1ArgsForCall)
}

func (fake *FakeHandler) Sha1ArgsForCall(i int) *zipper.Source {
	fake.sha1Mutex.RLock()
	defer fake.sha1Mutex.RUnlock()
	return fake.sha1ArgsForCall[i].src
}

func (fake *FakeHandler) Sha1Returns(result1 string, result2 error) {
	fake.Sha1Stub = nil
	fake.sha1Returns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeHandler) Sha1ReturnsOnCall(i int, result1 string, result2 error) {
	fake.Sha1Stub = nil
	if fake.sha1ReturnsOnCall == nil {
		fake.sha1ReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.sha1ReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeHandler) Detect(src *zipper.Source) bool {
	fake.detectMutex.Lock()
	ret, specificReturn := fake.detectReturnsOnCall[len(fake.detectArgsForCall)]
	fake.detectArgsForCall = append(fake.detectArgsForCall, struct {
		src *zipper.Source
	}{src})
	fake.recordInvocation("Detect", []interface{}{src})
	fake.detectMutex.Unlock()
	if fake.DetectStub != nil {
		return fake.DetectStub(src)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.detectReturns.result1
}

func (fake *FakeHandler) DetectCallCount() int {
	fake.detectMutex.RLock()
	defer fake.detectMutex.RUnlock()
	return len(fake.detectArgsForCall)
}

func (fake *FakeHandler) DetectArgsForCall(i int) *zipper.Source {
	fake.detectMutex.RLock()
	defer fake.detectMutex.RUnlock()
	return fake.detectArgsForCall[i].src
}

func (fake *FakeHandler) DetectReturns(result1 bool) {
	fake.DetectStub = nil
	fake.detectReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeHandler) DetectReturnsOnCall(i int, result1 bool) {
	fake.DetectStub = nil
	if fake.detectReturnsOnCall == nil {
		fake.detectReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.detectReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeHandler) Name() string {
	fake.nameMutex.Lock()
	ret, specificReturn := fake.nameReturnsOnCall[len(fake.nameArgsForCall)]
	fake.nameArgsForCall = append(fake.nameArgsForCall, struct{}{})
	fake.recordInvocation("Name", []interface{}{})
	fake.nameMutex.Unlock()
	if fake.NameStub != nil {
		return fake.NameStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.nameReturns.result1
}

func (fake *FakeHandler) NameCallCount() int {
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	return len(fake.nameArgsForCall)
}

func (fake *FakeHandler) NameReturns(result1 string) {
	fake.NameStub = nil
	fake.nameReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeHandler) NameReturnsOnCall(i int, result1 string) {
	fake.NameStub = nil
	if fake.nameReturnsOnCall == nil {
		fake.nameReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.nameReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeHandler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.zipMutex.RLock()
	defer fake.zipMutex.RUnlock()
	fake.sha1Mutex.RLock()
	defer fake.sha1Mutex.RUnlock()
	fake.detectMutex.RLock()
	defer fake.detectMutex.RUnlock()
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeHandler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ zipper.Handler = new(FakeHandler)
